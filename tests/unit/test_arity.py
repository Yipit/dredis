import pytest
from dredis.commands import REDIS_COMMANDS


# got the list from a real redis server using the following code:
"""
import pprint
import redis
r = redis.StrictRedis()
commands = r.execute_command('COMMAND')
pprint.pprint({c[0]: int(c[1]) for c in commands})
"""
EXPECTED_ARITY = {
    'append': 3,
    'asking': 1,
    'auth': 2,
    'bgrewriteaof': 1,
    'bgsave': -1,
    'bitcount': -2,
    'bitfield': -2,
    'bitop': -4,
    'bitpos': -3,
    'blpop': -3,
    'brpop': -3,
    'brpoplpush': 4,
    'client': -2,
    'cluster': -2,
    'command': 0,
    'config': -2,
    'dbsize': 1,
    'debug': -1,
    'decr': 2,
    'decrby': 3,
    'del': -2,
    'discard': 1,
    'dump': 2,
    'echo': 2,
    'eval': -3,
    'evalsha': -3,
    'exec': 1,
    'exists': -2,
    'expire': 3,
    'expireat': 3,
    'flushall': -1,
    'flushdb': -1,
    'geoadd': -5,
    'geodist': -4,
    'geohash': -2,
    'geopos': -2,
    'georadius': -6,
    'georadius_ro': -6,
    'georadiusbymember': -5,
    'georadiusbymember_ro': -5,
    'get': 2,
    'getbit': 3,
    'getrange': 4,
    'getset': 3,
    'hdel': -3,
    'hexists': 3,
    'hget': 3,
    'hgetall': 2,
    'hincrby': 4,
    'hincrbyfloat': 4,
    'hkeys': 2,
    'hlen': 2,
    'hmget': -3,
    'hmset': -4,
    'host:': -1,
    'hscan': -3,
    'hset': -4,
    'hsetnx': 4,
    'hstrlen': 3,
    'hvals': 2,
    'incr': 2,
    'incrby': 3,
    'incrbyfloat': 3,
    'info': -1,
    'keys': 2,
    'lastsave': 1,
    'latency': -2,
    'lindex': 3,
    'linsert': 5,
    'llen': 2,
    'lpop': 2,
    'lpush': -3,
    'lpushx': -3,
    'lrange': 4,
    'lrem': 4,
    'lset': 4,
    'ltrim': 4,
    'memory': -2,
    'mget': -2,
    'migrate': -6,
    'module': -2,
    'monitor': 1,
    'move': 3,
    'mset': -3,
    'msetnx': -3,
    'multi': 1,
    'object': -2,
    'persist': 2,
    'pexpire': 3,
    'pexpireat': 3,
    'pfadd': -2,
    'pfcount': -2,
    'pfdebug': -3,
    'pfmerge': -2,
    'pfselftest': 1,
    'ping': -1,
    'post': -1,
    'psetex': 4,
    'psubscribe': -2,
    'psync': 3,
    'pttl': 2,
    'publish': 3,
    'pubsub': -2,
    'punsubscribe': -1,
    'randomkey': 1,
    'readonly': 1,
    'readwrite': 1,
    'rename': 3,
    'renamenx': 3,
    'replconf': -1,
    'restore': -4,
    'restore-asking': -4,
    'role': 1,
    'rpop': 2,
    'rpoplpush': 3,
    'rpush': -3,
    'rpushx': -3,
    'sadd': -3,
    'save': 1,
    'scan': -2,
    'scard': 2,
    'script': -2,
    'sdiff': -2,
    'sdiffstore': -3,
    'select': 2,
    'set': -3,
    'setbit': 4,
    'setex': 4,
    'setnx': 3,
    'setrange': 4,
    'shutdown': -1,
    'sinter': -2,
    'sinterstore': -3,
    'sismember': 3,
    'slaveof': 3,
    'slowlog': -2,
    'smembers': 2,
    'smove': 4,
    'sort': -2,
    'spop': -2,
    'srandmember': -2,
    'srem': -3,
    'sscan': -3,
    'strlen': 2,
    'subscribe': -2,
    'substr': 4,
    'sunion': -2,
    'sunionstore': -3,
    'swapdb': 3,
    'sync': 1,
    'time': 1,
    'touch': -2,
    'ttl': 2,
    'type': 2,
    'unlink': -2,
    'unsubscribe': -1,
    'unwatch': 1,
    'wait': 3,
    'watch': -2,
    'zadd': -4,
    'zcard': 2,
    'zcount': 4,
    'zincrby': 4,
    'zinterstore': -4,
    'zlexcount': 4,
    'zrange': -4,
    'zrangebylex': -4,
    'zrangebyscore': -4,
    'zrank': 3,
    'zrem': -3,
    'zremrangebylex': 4,
    'zremrangebyrank': 4,
    'zremrangebyscore': 4,
    'zrevrange': -4,
    'zrevrangebylex': -4,
    'zrevrangebyscore': -4,
    'zrevrank': 3,
    'zscan': -3,
    'zscore': 3,
    'zunionstore': -4,
}


@pytest.mark.parametrize('command, func', REDIS_COMMANDS.items())
def test_arity(command, func):
    assert func.arity == EXPECTED_ARITY[command.lower()]
